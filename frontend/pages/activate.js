import Head from 'next/head'
import { useRouter } from 'next/router'

import { useState } from 'react';

import TextField from '@mui/material/TextField';
import Button from '@mui/material/Button';
import Alert from '@mui/material/Alert';
import Stack from '@mui/material/Stack';

import config from '@/components/Config';

export default function Activate(props) {
  const router = useRouter();
  const queryParams = router.query
  const email = queryParams.email;
  const uuid = queryParams.uuid;

  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [disabled, setDisabled] = useState(false);
  const [alert, setAlert] = useState(null);

  // TODO invoke on enter key down
  function activate() {
    setDisabled(true);
    
    if(password.length < 6) {
      setAlert("Password must have at least 6 characters");
      setDisabled(false);
      return;
    } else if(password !== confirmPassword) {
      setAlert("Passwords do not match")
      setDisabled(false);
      return;
    }

    fetch(config.urlPrefix + "/auth/activate", {method: "POST", headers: {"Content-Type": "application/json"}, body: JSON.stringify({email, uuid, password})})
      .then(r => {
        if(r.status === 200) {
          window.location.replace("/login");
          setAlert(null);
        } else {
          setAlert("Unexpected error");
          setDisabled(false);
        }
      });
  }

  return (
    <>
      <Head>
        <title>Crowding Visualization</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Stack spacing={2}>
          <TextField disabled value={email} />
          <TextField type="password" label="Password" value={password} onChange={e => setPassword(e.target.value)} />
          <TextField type="password" label="Confirm password" value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)} />
          <Button disabled={disabled} variant="contained" onClick={activate}>Activate account</Button>
        </Stack>
        {alert && <Alert severity="error" onClose={() => setAlert(null)}>{alert}</Alert>}
      </main>
    </>
  )
}
