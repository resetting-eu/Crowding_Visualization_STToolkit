worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # Logging settings
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    error_log   /var/log/nginx/error.log;

    # SSL configuration
    ssl_certificate /etc/nginx/ssl/crowdingVisualization.crt;
    ssl_certificate_key /etc/nginx/ssl/crowdingVisualization.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

    # Define a cache zone for proxy caching (adjust the size as needed)
    # proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off;

    # Main server block (HTTP to HTTPS redirection)
    server {
        listen 80;
        # server_name localhost; # Change to your actual domain

        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server block
    server {
        listen 443 ssl;
        # server_name localhost; # Change to your actual domain

        # Location block for frontend (Next.js)
        location / {
            proxy_pass http://frontend:3000; # Point to your Next.js frontend container
            # proxy_set_header Host $host;
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header X-Forwarded-Proto $scheme;

            # Enable caching (uncomment this section if caching is desired)
            # proxy_cache my_cache;
            # proxy_cache_valid 200 1h;
            # add_header X-Proxy-Cache $upstream_cache_status;
        }

        # Location block for backend (Flask with uWSGI)
        location /be/ {
            rewrite ^/be(/.*)$ $1 break;
            include uwsgi_params;
            uwsgi_pass backend:5000; # Point to your Flask uWSGI backend container
        }

        # Configure SSL options (you can add more options as needed)
        # ssl_session_timeout 1d;
        # ssl_session_cache shared:SSL:50m;
        # ssl_session_tickets off;

        # ssl_stapling on;
        # ssl_stapling_verify on;

        # Enable HSTS (adjust the max-age as needed)
        # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # OCSP stapling settings
        # resolver 8.8.8.8 8.8.4.4 valid=300s;
        # resolver_timeout 5s;

        # Disable insecure SSL/TLS protocols and ciphers
        ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';

        # Enable OCSP stapling for better SSL performance
        # ssl_trusted_certificate /etc/nginx/ssl/crowdingVisualization.crt;
    }
}
